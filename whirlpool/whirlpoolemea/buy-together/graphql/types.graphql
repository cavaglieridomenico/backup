type Product {
  skuId: String
  """
  Brand of the product
  """
  brand: String 
  """
  Id of the brand of the product
  """
  brandId: Int
  """
  linkText is used as cacheId
  """
  cacheId: ID
  categoryId: ID
  """
  Categories of the product
  """
  categories: [String] 
  """
  Product's categories
  """
  categoryTree: [Category]
  """
  List of related products
  """
  clusterHighlights: [ClusterHighlight]
  productClusters: [ProductClusters]
  """
  Product description
  """
  description: String 
  """
  SKU objects of the product
  """
  items(filter: ItemsFilter): [SKU]
  """
  List of SKU Specifications
  """
  skuSpecifications: [SkuSpecification]
  """
  Product URL
  """
  link: String
  """
  Product slug
  """
  linkText: String
  """
  Product ID
  """
  productId: ID
  """
  Product name
  """
  productName: String 
  """
  Array of product properties
  """
  properties: [Property]
  """
  Array of product properties
  """
  propertyGroups: [PropertyGroup]
  """
  Product reference
  """
  productReference: String
  """
  Title used by html tag
  """
  titleTag: String 
  """
  Description used by html tag
  """
  metaTagDescription: String 
  """
  Related Products
  """
  recommendations: Recommendation
  """
  JSON specification of the product
  """
  jsonSpecifications: String
  """
  List of benefits associated with this product
  """
  benefits: [Benefit]
  itemMetadata: ItemMetadata
  """
  Array of product SpecificationGroup
  """
  specificationGroups: [SpecificationGroup]

  """
  Returns highest and lowest prices for available SKUs in product.
  """
  priceRange: ProductPriceRange

  """
  Product Release Date, for list ordering and product cluster highlight
  """
  releaseDate: String

  """
  Product properties that will be selected by default. e.g: {key: "Color", value: "Blue"}
  """
  selectedProperties: [SelectedProperty]
  """
  Merchandising rule applied to the product
  """
  rule: Rule
}
type SelectedProperty {
  key: String
  value: String
}

type Category {
  """ id is used as cacheId """
  cacheId: ID
  """ URI of category """
  href: String
  """ Category text link """
  slug: String
  """ Category ID """
  id: Int
  """ Category name """
  name: String 
  """ Title used by html tag"""
  titleTag: String 
  """ Description used by html tag"""
  hasChildren: Boolean
  """ Has children categories """
  metaTagDescription: String 
  """ Categories children """
  children: [Category]
}

type Benefit {
  """ Flag which indicates if the benefit is featured or not """
  featured: Boolean
  """ Id of the product which the benefit is associated """
  id: String
  """ Name of the benefit """
  name: String
  """ Items of the benefit """
  items: [BenefitItem]
  """ Type of benefit """
  teaserType: String
}

type BenefitItem {
  """ Product itself """
  benefitProduct: Product
  """ IDs of the SKU Items that are taking part in the benefit """
  benefitSKUIds: [String]
  """ Discount applied to the benefit product """
  discount: Float
  """ Minimum quantity of the benefit product that is required to validate the benefit """
  minQuantity: Int
}

type ItemMetadata {
  items: [ItemMetadataUnit]
  priceTable: [ItemPriceTable]
}

type ItemPriceTable {
  type: String
  values: [PriceTableItem]
}

type PriceTableItem {
  id: String
  assemblyId: String
  price: Int
}

type ItemMetadataUnit {
  id: ID
  name: String
  skuName: String
  productId: String
  refId: String
  ean: String
  imageUrl: String 
  detailUrl: String
  seller: String
  assemblyOptions: [AssemblyOption]
}

type AssemblyOption {
  id: ID
  name: String
  required: Boolean
  composition: CompositionType
  inputValues: [InputValue]
}

scalar StringOrBoolean

type InputValue {
  label: String
  maxLength: Int
  type: InputValueType
  defaultValue: StringOrBoolean
  domain: [String]
}

enum InputValueType {
  TEXT
  BOOLEAN
  OPTIONS
}

type CompositionType {
  minQuantity: Int
  maxQuantity: Int
  items: [CompositionItem]
}

type CompositionItem {
  id: ID
  minQuantity: Int
  maxQuantity: Int
  initialQuantity: Int
  priceTable: String
  seller: String
}

input AssemblyOptionInput {
  id: ID!
  quantity: Int!
  assemblyId: String!
  seller: String!
  options: [AssemblyOptionInput!]
}

enum ItemsFilter {
  """
  Returns all items, same as no filter.
  """
  ALL
  """
  Returns only the first available item. Returns first if no item is available.
  """
  FIRST_AVAILABLE
  """
  Returns all available items. Returns first if no item is available.
  """
  ALL_AVAILABLE
}

type ProductPriceRange {
  sellingPrice: PriceRange
  listPrice: PriceRange
}

type PriceRange {
  highPrice: Float
  lowPrice: Float
}

type OnlyProduct {
  brand: String
  categoryId: ID
  categoryTree: [Category]
  clusterHighlights: [ClusterHighlight]
  productClusters: [ProductClusters]
  description: String
  link: String
  linkText: String
  productId: ID
  productName: String
  properties: [Property]
  propertyGroups: [PropertyGroup]
  productReference: String
  recommendations: Recommendation
  jsonSpecifications: String
}

type ProductClusters {
  id: ID
  name: String
}

type ClusterHighlight {
  id: ID
  name: String
}

type Seller {
  sellerId: ID
  sellerName: String
  addToCartLink: String
  sellerDefault: Boolean
  commertialOffer: Offer
}

type Recommendation {
  buy: [Product]
  view: [Product]
  similars: [Product]
}

type SKU {
  itemId: ID
  name: String 
  nameComplete: String 
  complementName: String
  ean: String
  referenceId: [Reference]
  measurementUnit: String
  unitMultiplier: Float
  kitItems: [KitItem]
  images(quantity: Int): [Image]
  videos: [Video]
  sellers: [Seller]
  variations: [Property]
  attachments: [Attachment] 
  estimatedDateArrival: String
}

type SkuSpecification {
  field: SKUSpecificationField
  values: [SKUSpecificationValue]
}

type SKUSpecificationField {
  originalName: String
  name: String 
}

type SKUSpecificationValue {
  originalName: String
  name: String 
}

type productSpecification {
  fieldName: String 
  fieldValues: [String] 
}

input ProductUniqueIdentifier {
  field: ProductUniqueIdentifierField!
  value: ID!
}

enum ProductUniqueIdentifierField {
  id
  slug
  ean
  reference
  sku
}

type KitItem {
  itemId: ID
  amount: Int
  product: OnlyProduct
  sku: SKU
}

type Attachment {
  id: ID
  name: String
  required: Boolean
  domainValues: [DomainValues]
}

type DomainValues {
  FieldName: String
  MaxCaracters: String
  DomainValues: String
}

enum InstallmentsCriteria {
  MAX_WITHOUT_INTEREST
  MAX_WITH_INTEREST
  MAX # Equivalent to MAX_WITHOUT_INTEREST. Kept for backwards-compatibility
  MIN
  ALL
}

type Offer {
  Installments(
    criteria: InstallmentsCriteria = ALL
    rates: Boolean = true
    excludedPaymentSystems: [String]
    includedPaymentSystems: [String]
  ): [Installment]
  Price: Float
  ListPrice: Float
  spotPrice: Float
  PriceWithoutDiscount: Float
  RewardValue: Float
  PriceValidUntil: String
  AvailableQuantity: Float
  Tax: Float
  taxPercentage: Float
  CacheVersionUsedToCallCheckout: String
  DeliverySlaSamples: [DeliverySlaSamples]
  """
  List of discount highlights
  """
  discountHighlights: [Discount!]
  teasers: [Teaser!]
  """
  List of SKUs for gifts associated with the product
  """
  giftSkuIds: [String]
  """
  List of gifts associated with the product
  """
  gifts: [Gift]
}

type Gift {
  productName: String
  skuName: String
  brand: String
  linkText: String
  description: String
  images: [GiftImage]
}

type GiftImage {
  imageUrl: String
  imageLabel: String
  imageText: String
}

type Teaser {
  name: String
  conditions: TeaserCondition
  effects: TeaserEffects
}

type TeaserCondition {
  minimumQuantity: Int
  parameters: [TeaserValue]
}

type TeaserEffects {
  parameters: [TeaserValue]
}

type TeaserValue {
  name: String
  value: String
}

"""
Discount object
"""
type Discount {
  """
  Discount name
  """
  name: String
}

type DeliverySlaSamples {
  DeliverySlaPerTypes: [DeliverySlaPerTypes]
  Region: Region
}

type DeliverySlaPerTypes {
  TypeName: String
  Price: Float
  EstimatedTimeSpanToDelivery: String
}

type Region {
  IsPersisted: Boolean
  IsRemoved: Boolean
  Id: ID
  Name: String
  CountryCode: String
  ZipCode: String
  CultureInfoName: String
}

type Image {
  cacheId: ID
  imageId: ID
  imageLabel: String
  imageTag: String
  imageUrl: String 
  imageText: String
}

type Video {
  videoUrl: String
}

type SpecificationGroup {
  originalName: String
  name: String 
  specifications: [SpecificationGroupProperty]
}

type SpecificationGroupProperty {
  originalName: String
  name: String 
  values: [String] 
}

type Property {
  originalName: String
  name: String
  values: [String] 
}

type PropertyGroup {
  name: String
  properties: [String]
}

type Installment {
  Value: Float
  InterestRate: Float
  TotalValuePlusInterestRate: Float
  IDOfInstallments: Int
  PaymentSystemName: String
  PaymentSystemGroupName: String
  Name: String
}

type Reference {
  Key: String
  Value: String
}

enum CrossSelingInputEnum {
  buy
  similars
  view
  viewAndBought
  accessories
  suggestions
}

type Rule {
  id: String
}

""" ----------------------------------   second query   ---------------------------------------- """

type DiscountResponse{
  items: [ItemsDisount],
  ratesAndBenefitsData: RatesAndBenefitsData,
  paymentData: PaymentData,
  selectableGifts: [String],
  marketingData: String,
  postalCode: String,
  country: String,
  logisticsInfo: [LogisticsInfo],
  messages: [DiscountMessage],
  purchaseConditions: PurchaseConditions,
  pickupPoints: [String],
  subscriptionData: String,
  totals: [TotalDiscount],
  itemMetadata: String
}

type RatesAndBenefitsData {
  rateAndBenefitsIdentifiers: [RateAndBenefitsIdentifiers],
  teaser: [String]
}
type RateAndBenefitsIdentifiers{
  id: String,
  name: String,
  featured: Boolean,
  description: String,
  matchedParameters: String,
  additionalInfo: String
}

type TotalDiscount{
  id: String,
  name: String,
  value: Float
}

type Offerings {
    type: String,
    id: String,
    name: String,
    allowGiftMessage: Boolean,
    attachmentOfferings: [String],
    price: ID
}

type PriceDefinition {
  calculatedSellingPrice: ID,
  total: ID,
  sellingPrices: [SellingPrices]
}

type SellingPrices {
  value: ID,
  quantity: ID
}

type ItemsDisount {
  id: String,
  requestIndex: ID,
  quantity: ID,
  seller: String,
  sellerChain: [String],
  tax: ID,
  priceValidUntil: String,
  price: ID,
  listPrice: ID,
  rewardValue: ID,
  sellingPrice: ID,
  offerings: [Offerings],
  priceTags: [PriceTags],
  measurementUnit: String,
  unitMultiplier: ID,
  parentItemIndex: ID,
  parentAssemblyBinding: String,
  availability: String,
  catalogProvider: String,
  priceDefinition: PriceDefinition
}

type PriceTags {
  name: String,
  value: Float,
  rawValue: Float,
  isPercentual: String,
  identifier: String,
  owner: String
}

type PaymentData {
  installmentOptions: [String],
  paymentSystems: [String],
  payments: [String],
  giftCards: [String],
  giftCardMessages: [String],
  availableAccounts: [String],
  availableTokens: [String],
  availableAssociations: String
}

type DeliveryChannels {
  id: String
}

type LogisticsInfo {
  itemIndex: ID,
  addressId: String,
  selectedSla: String,
  selectedDeliveryChannel: String,
  quantity: ID,
  shipsTo: [String],
  slas: [String],
  deliveryChannels: [DeliveryChannels]
}

type MessageFields {
  ean: String,
  itemIndex: String,
  skuName: String
}

type DiscountMessage {
  code: String,
  text: String,
  status: String,
  fields: MessageFields
}

type ItemPurchaseConditions {
  id: String,
  seller: String,
  sellerChain: [String],
  slas: [String],
  price: ID,
  listPrice: ID
}

type PurchaseConditions {
  itemPurchaseConditions: [ItemPurchaseConditions]
}