type OrderForm {
  orderFormId: ID
  canEditData: Boolean
  clientPreferencesData: ClientPreferences
  clientProfileData: ClientProfile
  invoiceData: InvoiceData
  customData: CustomData
  items: [Item]
  loggedIn: Boolean
  paymentData: PaymentData
  salesChannel: String
  sellers: [Seller]
  shippingData: ShippingData
  storePreferencesData: StorePreferences
  totalizers: [Totalizer]
  userProfileId: String
  userType: String
  value: Float
  openTextField: OpenTextField
  messages: [Message]
  marketingData: MarketingData
}

type OpenTextField {
  value: String
}

type ClientPreferences {
  locale: String
  optinNewsLetter: Boolean
}

type ClientProfile {
  email: String
  firstName: String
  lastName: String
  phone: String
  isCorporate: Boolean
  corporateDocument: String
  corporateName: String
  corporatePhone: String
  document: String
  documentType: String
  stateInscription: String
  tradeName: String
}

type InvoiceData {
  address: Address
}

type CustomData {
  customApps: [CustomApp]
}

type CustomApp {
  id: ID!
  major: Int
  fields: JSON
}

type Item {
  id: ID
  name: String
  detailUrl: String
  imageUrl: String
  skuName: String
  productRefId: String
  quantity: Float
  uniqueId: String
  productId: String
  refId: String
  ean: String
  priceValidUntil: String
  price: Float
  tax: Int
  listPrice: Float
  sellingPrice: Float
  rewardValue: Int
  isGift: Boolean
  parentItemIndex: Int
  parentAssemblyBinding: String
  seller: String
  productCategoryIds: String
  productCategories: ProductCategories
  measurementUnit: String
  unitMultiplier: Float
  offerings: [Offering!]!
  bundleItems: [Item!]!
  modalType: String
  additionalInfo: AdditionalInfo
}

scalar ProductCategories

type Seller {
  id: String
  name: String
}

type ShippingData {
  address: Address
  availableAddresses: [Address]!
  selectedAddresses: [Address]!
  logisticsInfo: [LogisticsInfo]
}

type Address {
  addressId: String
  cacheId: ID
  id: String
  isDisposable: Boolean
  userId: String
  receiverName: String
  complement: String
  neighborhood: String
  country: String
  state: String
  number: String
  street: String
  geoCoordinates: [Float]
  postalCode: String
  city: String
  reference: String
  addressName: String
  addressType: String
}

type LogisticsInfo {
  addressId: String
  itemId: String
  itemIndex: Int
  selectedSla: String
  slas: [SLA]
}

type SLA {
  availableDeliveryWindows: [DeliveryWindow]
  deliveryChannel: String
  deliveryWindow: DeliveryWindow
  id: String
  name: String
  price: Float
  shippingEstimate: String
  shippingEstimateDate: String
}

type DeliveryWindow {
  startDateUtc: String
  endDateUtc: String
  price: Float
  lisPrice: Float
  tax: Float
}

type StorePreferences {
  countryCode: String
  currencyCode: String
  timeZone: String
  currencyFormatInfo: CurrencyFormatInfo
  currencySymbol: String
}

type CurrencyFormatInfo {
  currencyDecimalDigits: Int
  currencyDecimalSeparator: String
  currencyGroupSeparator: String
  startsWithCurrencySymbol: Boolean
}

type Totalizer {
  id: ID
  name: String
  value: Float
}

type PaymentData {
  availableAccounts: [AvailableAccount!]!
  paymentSystems: [PaymentSystem!]!
  payments: [Payment!]!
  updateStatus: String
}

type AvailableAccount {
  accountId: String!
  paymentSystem: String!
  paymentSystemName: String!
  cardNumber: String!
}

type PaymentSystem {
  id: String!
  name: String!
  groupName: String!
  validator: Validator
  stringId: String!
  requiresDocument: Boolean!
  isCustom: Boolean!
  description: String
  requiresAuthentication: Boolean
  dueDate: String
}

type Validator {
  regex: String
  mask: String
  cardCodeRegex: String
  cardCodeMask: String
  weights: [Int]
  useCvv: Boolean
  useExpirationDate: Boolean
  useCardHolderName: Boolean
  useBillingAddress: Boolean
}

type Payment {
  paymentSystem: String
  bin: String
  accountId: String
  tokenId: String
  installments: Int
  referenceValue: Float
  value: Float
}

type Offering {
  id: String!
  name: String! @translatableV2
  price: Int!
  type: String!
}

type Message {
  code: String
  text: String,
  status: String,
  fields: MessageField
}

type MessageField {
  value: String
}

type MarketingData {
  utmSource: String,
  utmMedium: String
  utmCampaign: String
  utmipage: String
  utmiPart: String
  utmiCampaign: String
  coupon: String,
  marketingTags: [String]
}

type AdditionalInfo {
  brandName: String
  brandId: String
}

# INPUT

input ProfileDataInput {
  email: String!
  firstName: String!
  lastName: String!
  documentType: String
  document: String
  phone: String
  corporateName: String
  tradeName: String
  corporateDocument: String
  stateInscription: String
  corporatePhone: String
  isCorporate: Boolean
}

input InvoiceDataInput {
  address: AddressInput
}

input AddressInput {
  country: String
  complement: String
  state: String
  number: String
  street: String
  geoCoordinates: [Float]
  postalCode: String
  city: String
}

input ClientPreferencesData {
  locale: String
  optinNewsLetter: Boolean!
}
